/*===========================================================================

	main.cpp
  
 Initializes and executes the four XABSL engines.
    
     author: Martin Lötzsch
===========================================================================*/

#include "players.h"
#include "soccer.h"
#include "WorldState.h"
#include "MyBasicBehaviors.h"
#include "Tools.h"
#include "../Xabsl/XabslEngine/XabslEngine.h"

// an instance of the derived error handler 
MyErrorHandler myErrorHandler;

// the world state that is shared by all players
WorldState worldState;

// the next action to be generated by the active agent
int nextAction;

// an xabsl engine for each of the four players
xabsl::Engine* pEngine[4];

// instances of the basic behaviors
BasicBehaviorGetBehindBall basicBehaviorGetBehindBall(myErrorHandler, worldState, nextAction);
BasicBehaviorGoTo basicBehaviorGoTo(myErrorHandler, worldState, nextAction);

void UN(initialize_game)()
{
  // create four engines
  for (int i=0; i<4;i++)
  {
    // create the engine
    pEngine[i] = new xabsl::Engine(myErrorHandler, &getCurrentSystemTime);

    // register basic behaviors
    pEngine[i]->registerBasicBehavior(basicBehaviorGetBehindBall);
    pEngine[i]->registerBasicBehavior(basicBehaviorGoTo);

    // register the symbols
    pEngine[i]->registerEnumElement("role", "role.striker", WorldState::striker);
    pEngine[i]->registerEnumElement("role", "role.defender", WorldState::defender);
    pEngine[i]->registerEnumElement("role", "role.midfielder", WorldState::midfielder);
    pEngine[i]->registerEnumElement("next_action", "next_action.undefined", -1);
    pEngine[i]->registerEnumElement("next_action", "next_action.NW", NW);
    pEngine[i]->registerEnumElement("next_action", "next_action.N", N);
    pEngine[i]->registerEnumElement("next_action", "next_action.NE", NE);
    pEngine[i]->registerEnumElement("next_action", "next_action.E", E);
    pEngine[i]->registerEnumElement("next_action", "next_action.SE", SE);
    pEngine[i]->registerEnumElement("next_action", "next_action.S", S);
    pEngine[i]->registerEnumElement("next_action", "next_action.SW", SW);
    pEngine[i]->registerEnumElement("next_action", "next_action.W", W);
    pEngine[i]->registerEnumElement("next_action", "next_action.kick", KICK);
    pEngine[i]->registerEnumElement("next_action", "next_action.do_nothing", DO_NOTHING);
    pEngine[i]->registerEnumeratedOutputSymbol("next_action", "next_action", &nextAction);
    pEngine[i]->registerEnumeratedInputSymbol("role", "role", &WorldState::getPlayerRole);
    pEngine[i]->registerDecimalInputSymbol("x", &WorldState::getX);
    pEngine[i]->registerDecimalInputSymbol("y", &WorldState::getY);
    pEngine[i]->registerDecimalInputSymbol("ball.x", &WorldState::getBallX);
    pEngine[i]->registerDecimalInputSymbol("ball.y", &WorldState::getBallY);
    pEngine[i]->registerDecimalInputSymbol("ball.distance", &WorldState::getBallDistance);
    pEngine[i]->registerEnumeratedInputSymbol("ball.local.direction","next_action", &WorldState::getBallLocalDirection);
    pEngine[i]->registerDecimalInputSymbol("most_westerly_teammate.x", &WorldState::getMostWesterlyTeammateX);

    // parse the intermediate code
    MyFileInputSource input("intermediate-code.dat");
    pEngine[i]->createOptionGraph(input);
  }
}

void printOptionActivationTree(xabsl::Engine& engine, xabsl::ErrorHandler& errorHandler);

int UN(player1)(int local_area[9], int ball_direction, int x, int y)
{
  char* actionStrings[] = {"NW","N","NE","W","","E","SW","S","SE","kick","do_nothing"};

  if (!myErrorHandler.errorsOccurred)
  {
    worldState.update(0, local_area,ball_direction,x,y);
    worldState.computeRoles();
    pEngine[0]->execute();
    printOptionActivationTree(*pEngine[0],myErrorHandler);
    myErrorHandler.message("action = %s",actionStrings[nextAction]);
    worldState.printField(myErrorHandler);
    return nextAction;
  }
  else 
  {
    return W;
  }
}

int UN(player2)(int local_area[9], int ball_direction, int x, int y)
{
  if (!myErrorHandler.errorsOccurred)
  {
    worldState.update(1, local_area,ball_direction,x,y);
    pEngine[1]->execute();
    return nextAction;
  }
  else 
  {
    return W;
  }
}

int UN(player3)(int local_area[9], int ball_direction, int x, int y)
{
  if (!myErrorHandler.errorsOccurred)
  {
    worldState.update(2, local_area,ball_direction,x,y);
    pEngine[2]->execute();
    return nextAction;
  }
  else 
  {
    return W;
  }
}

int UN(player4)(int local_area[9], int ball_direction, int x, int y)
{
  if (!myErrorHandler.errorsOccurred)
  {
    worldState.update(3, local_area,ball_direction,x,y);
    pEngine[3]->execute();
    return nextAction;
  }
  else 
  {
    return W;
  }
}

char *UN(team_name)()
{
  char	*s;
  /*  "####################\0" <--- 20 characters */
  s = "XABSL Example Agents\0";
  return(s);
}

void UN(initialize_point)()
{
  worldState.reset();
}

void UN(lost_point)()
{
  myErrorHandler.message("lost point");
}

void UN(won_point)()
{
  myErrorHandler.message("won point");
}

void UN(game_over)()
{
  // delete the four engines
  for (int i=0; i<4;i++) if (pEngine[i]!=0) delete pEngine[i];
}

void printOptionActivationSubTree(int depth, const xabsl::Action* action, xabsl::ErrorHandler& errorHandler)
{
  char string[300]; int i;
  string[0]=0;

  for (i=0;i<depth;i++) strcat(string," ");

  if (const xabsl::Behavior* behavior = action->getBehavior())
  {
    strcat(string,behavior->n);
    strcat(string,"(");

    bool first=true;
    for(i=0; i<action->getParameters()->decimalValues.getSize();i++)
    {
      if (!first) strcat(string,", ");
      first = false;
      sprintf(string+strlen(string),"%s=%.0f",action->getParameters()->decimalValues.getName(i), action->getParameters()->decimalValues[i]);
    }
    for(i=0; i<action->getParameters()->booleanValues.getSize();i++)
    {
      if (!first) strcat(string,", ");
      first = false;
      sprintf(string+strlen(string),"%s=%s",action->getParameters()->booleanValues.getName(i), action->getParameters()->booleanValues[i] ? "true" : "false");
    }
    for(i=0; i<action->getParameters()->enumeratedValues.getSize();i++)
    {
      if (!first) strcat(string,", ");
      first = false;
      strcat(string,action->getParameters()->enumeratedValues.getName(i));
      strcat(string,"=");

      const xabsl::Enumeration* enumeration = action->getParameters()->enumeratedExpressions[i]->enumeration;

      for (int j = 0; j < enumeration->enumElements.getSize(); j++)
        if (enumeration->enumElements[j]->v == action->getParameters()->enumeratedValues[i])
        {
          strcat(string, enumeration->enumElements[j]->n);
          break;
        }
    }

    strcat(string,")");
  }
  else if (const xabsl::DecimalOutputSymbol* decimalOutputSymbol = action->getDecimalOutputSymbol())
  {
    sprintf(string+strlen(string),"%s=%.0f",decimalOutputSymbol->n,action->getDecimalOutputSymbolValue());
  }
  else if (const xabsl::BooleanOutputSymbol* booleanOutputSymbol = action->getBooleanOutputSymbol())
  {
    sprintf(string+strlen(string),"%s=%s",booleanOutputSymbol->n,action->getBooleanOutputSymbolValue() ? "true" : "false");
  }
  else if (const xabsl::EnumeratedOutputSymbol* enumeratedOutputSymbol = action->getEnumeratedOutputSymbol())
  {
    strcat(string, enumeratedOutputSymbol->n);
    strcat(string, "=");

    const xabsl::Enumeration* enumeration = enumeratedOutputSymbol->enumeration;

    for (int j = 0; j < enumeration->enumElements.getSize(); j++)
      if (enumeration->enumElements[j]->v == action->getEnumeratedOutputSymbolValue())
      {
        strcat(string, enumeration->enumElements[j]->n);
        break;
      }
  }
  errorHandler.message("%s",string);

  if (const xabsl::Option* option = action->getOption())
  {
    const xabsl::Array<xabsl::Action*>& actions = 
      option->activeState->actions;

    for(i=0;i<actions.getSize();i++)
      printOptionActivationSubTree(depth + 1, actions[i], errorHandler);
  }
}

void printOptionActivationTree(xabsl::Engine& engine, xabsl::ErrorHandler& errorHandler)
{
  errorHandler.message("\n\n\n\n");

  const xabsl::Action* action = engine.getRootAction(0);

  printOptionActivationSubTree(0, action, errorHandler);
}

